import java.io.*;
import java.util.*;

public class dneigh{
  static int[][] anw={
    {1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1},
    {2, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 2},
    {2, 4, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 3, 2},
    {1, 4, 2, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 2, 3, 1},
    {1, 3, 2, 4, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 3, 2, 4, 1},
    {2, 3, 1, 4, 2, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 2, 3, 1, 4, 2},
    {2, 4, 1, 3, 2, 4, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 3, 2, 4, 1, 3, 2},
    {1, 4, 2, 3, 1, 4, 2, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 2, 3, 1, 4, 2, 3, 1},
    {1, 3, 2, 4, 1, 3, 2, 4, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 3, 2, 4, 1, 3, 2, 4, 1},
    {2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2},
    {2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2},
    {1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1},
    {1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1},
    {2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2},
    {2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2},
    {1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1},
    {1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1},
    {2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2},
    {2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2},
    {1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1},
    {1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1},
    {2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 3, 4, 4, 3, 3, 4, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2},
    {2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 1, 2, 2, 1, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2},
    {1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 3, 4, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1},
    {1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1},
    {2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2},
    {2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 3, 4, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2},
    {1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 2, 1, 1, 2, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1},
    {1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 3, 4, 4, 3, 3, 4, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1},
    {2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2},
    {2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2},
    {1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1},
    {1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1},
    {2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2},
    {2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2},
    {1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1},
    {1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1},
    {2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2},
    {2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2},
    {1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1},
    {1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1},
    {2, 3, 1, 4, 2, 3, 1, 4, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 3, 1, 4, 2, 3, 1, 4, 2},
    {2, 4, 1, 3, 2, 4, 1, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 1, 3, 2, 4, 1, 3, 2},
    {1, 4, 2, 3, 1, 4, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 3, 1, 4, 2, 3, 1},
    {1, 3, 2, 4, 1, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 1, 3, 2, 4, 1},
    {2, 3, 1, 4, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 3, 1, 4, 2},
    {2, 4, 1, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 1, 3, 2},
    {1, 4, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 3, 1},
    {1, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 1},
    {2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2}
  };
  static int max;
  public static void Fillme(int a[][], int b[][][], int n, int m, int e, int f){
    if((e<0) || (e>=n)){
      return;
    }
    if((f<0)||(f>=m)){
      return;
    }


    if(a[e][f] !=0){
      return;
    }
    int y = -1;
    for(int u=0; u<10; u++){
      if(b[e][f][u]==0){
        b[e][f][u] = 1;
        y = u;
        break;
      }
    }
    a[e][f] = y+1;
    if((y+1)>max){
      max = y+1;
    }
    //top
    if((e+1)<n){
      if((f-1)>=0){
        b[e+1][f-1][y] = 1;
      }
      if((f+1)<m){
        b[e+1][f+1][y] = 1;
      }
      if((e+2)<n){
        b[e+2][f][y] = 1;
      }
    }
    //left-mid
    if(((e-1)>=0) && ((f+1)<m)){
      b[e-1][f+1][y] =1;
    }
    if((f+2)<m){
      b[e][f+2][y] =1;
    }


    //right-mid
    if(((e-1)>=0) && ((f-1)>=0)){
      b[e-1][f-1][y] =1;
    }
    if((f-2)>=0){
      b[e][f-2][y] =1;
    }


    //bottom
    if((e-2)>=0){
      b[e-2][f][y] = 1;
    }

    /**
    //top
    Fillme(a, b, n, m, e+2, f);
    Fillme(a, b, n, m, e+1, f-1);
    Fillme(a, b, n, m, e+1, f+1);

    //left-mid
    Fillme(a, b, n, m, e-1, f+1);
    Fillme(a, b, n, m, e, f+2);

    //right-mid
    Fillme(a, b, n, m, e-1, f-1);
    Fillme(a, b, n, m, e, f-2);

    //bottom
    Fillme(a, b, n, m, e, f-2);

    Fillme(a, b, n, m, e-1, f);
    Fillme(a, b, n, m, e, f-1);
    Fillme(a, b, n, m, e, f+1);
    Fillme(a, b, n, m, e+1, f);
    */

  }
  public static void main(String args[] ) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
      int cases = Integer.parseInt(br.readLine().trim());
      for(int i=0; i<cases; i++){
        String s[] = br.readLine().trim().split(" ");
        int n = Integer.parseInt(s[0]);
        int m = Integer.parseInt(s[1]);
        max = 0;
        int a[][] = new int[n][m];
        int b[][][] = new int[n][m][10];

        if(Math.min(n,m) < 3){
          if(n<m){
            for(int f=0; f<m; f++){
                for(int e =0; e<n; e++){
                  if(a[e][f] !=0){
                    continue;
                  }
                  Fillme(a, b, n, m, e, f);
              }
            }
          }
          else{
            for(int e =0; e<n; e++){
            for(int f=0; f<m; f++){

                  if(a[e][f] !=0){
                    continue;
                  }
                  Fillme(a, b, n, m, e, f);
              }
            }
          }
          System.out.println(""+max);
          for(int e=0; e<n; e++){
            for(int f=0; f<m; f++){
              if(f!=0){
                System.out.print(" ");
              }
              System.out.print(""+a[e][f]);
            }
            System.out.println();
          }
        }
        else{
          max = 0;
          for(int e=0; e<n; e++){
            for(int f=0; f<m; f++){
              if(max<anw[e][f]){
                max = anw[e][f];
              }
            }
          }
          System.out.println(""+max);
          for(int e=0; e<n; e++){
            for(int f=0; f<m; f++){
              if(f!=0){
                System.out.print(" ");
              }
              System.out.print(""+anw[e][f]);
            }
            System.out.println();
          }


        }


          /*
          for(int e=0; e<n; e++){
            for(int f=0; f<m; f++){
              if(f!=0){
                System.out.print(" ");
              }
              System.out.print(""+a[e][f]);
            }
            System.out.println();
          }

          b = new int[n][m][10];
          for(int e =0; e<n; e++){
            for(int f=0; f<m; f++){
              int y =-1;
              for(int u=0; u<10; u++){
                if(b[e][f][u]==0){
                  b[e][f][u] = 1;
                  y = u;
                  break;
                }
              }
              c[e][f] = y+1;
              if((y+1)>bes2){
                bes2 = y+1;
              }
              //top
              if((e+1)<n){
                if((f-1)>=0){
                  b[e+1][f-1][y] = 1;
                }
                if((f+1)<m){
                  b[e+1][f+1][y] = 1;
                }
                if((e+2)<n){
                  b[e+2][f][y] = 1;
                }
              }
              //left-mid
              if(((e-1)>=0) && ((f+1)<m)){
                b[e-1][f+1][y] =1;
              }
              if((f+2)<m){
                b[e][f+2][y] =1;
              }
              if(((e+1)<n) && ((f+1)<m)){
                b[e+1][f+1][y] =1;
              }
              //right-mid
              if(((e-1)>=0) && ((f-1)>=0)){
                b[e-1][f-1][y] =1;
              }
              if((f-2)>=0){
                b[e][f-2][y] =1;
              }
              if(((e+1)>n) && ((f-1)>=0)){
                b[e+1][f-1][y] =1;
              }
              //bottom
              if((e-1)>=0){
                if((f-1)>=0){
                  b[e-1][f-1][y] = 1;
                }
                if((f+1)<m){
                  b[e-1][f+1][y] = 1;
                }
                if((e-2)>=0){
                  b[e-2][f][y] = 1;
                }
              }
            }
          }
          */


      //}}
      }
    }
}
